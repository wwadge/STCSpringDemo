package com.yourname;

import org.junit.Assert;
import org.junit.Test;


import com.yourname.demo.model.*;
import com.yourname.demo.model.factories.*;
import com.yourname.demo.service.data.DataLayerScheduler;
import com.yourname.demo.service.data.DataLayerSchedulerImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/beans.database.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		


	
	/**
	 * Hibernate test case for table: scheduler.demo_test.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testDemoTest() throws CloneNotSupportedException {

	 	DataLayerScheduler dataLayerScheduler = DataLayerSchedulerImpl.getInstance();
		DemoTest demoTest = SchedulerDataPoolFactory.getDemoTest();
		dataLayerScheduler.saveOrUpdate(demoTest);

		Integer demoTestId = demoTest.getId();
		DemoTest copy = demoTest.clone();
		dataLayerScheduler.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerScheduler.evict(demoTest); 		 

		demoTest = dataLayerScheduler.getDemoTest(demoTestId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), demoTest.getName());
		// tests for coverage completeness
		Assert.assertFalse(demoTest.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(demoTest.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}



}

