<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:jee="http://www.springframework.org/schema/jee"

    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:lang="http://www.springframework.org/schema/lang"

    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"

    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-3.0.xsd
              http://www.springframework.org/schema/jee
              http://www.springframework.org/schema/jee/spring-jee-3.0.xsd

              http://www.springframework.org/schema/jms

              http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
              http://www.springframework.org/schema/lang
              http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
              http://www.springframework.org/schema/util
              http://www.springframework.org/schema/util/spring-util-3.0.xsd">

   	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" autowire="byType">
   	
		
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>
    <bean id="persistenceManager" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    

    <bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
	   <property name="ignoreResourceNotFound"><value>true</value></property>   <!--  In the properties file, override the items you need in this format:
	mainDataSource.user=root
	mainDataSource.password=abcdefgh
    -->
   		<property name="location">
   			<!--  You may use file:d:/temp/db.properties etc here -->
    		<value>classpath:demo.db.properties</value>
    	</property>
	</bean>



	
 
    <!-- BoneCP configuration -->
    <bean id="mainDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
       <property name="driverClass" value="com.mysql.jdbc.Driver" />
       <property name="jdbcUrl" value="jdbc:mysql://localhost/scheduler" />
       <property name="username" value="root"/>
       <property name="password" value=""/>
       <property name="maxConnectionsPerPartition" value="20"/>
       <property name="minConnectionsPerPartition" value="10"/>
       <property name="partitionCount" value="1"/>
       <!-- The following are marked as optional in the LDAP dbConnection object.  
       <property name="idleConnectionTestPeriodInMinutes" value="60"/>
       <property name="idleMaxAgeInMinutes" value="240"/>      
       <property name="acquireIncrement" value="3"/>                              
       <property name="preparedStatementCacheSize" value="100"/>
       <property name="releaseHelperThreads" value="3"/>
       -->
    </bean>

	<!-- Obtain a datasource connection via JNDI. This section will go if we make the transition to jndi (just repeated here
	to make it easier for others to change without flipping over to synchronizer again.  
	<bean id="mainDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
         <property name="jndiName" value="jdbc/demo" />
         <property name="resourceRef" value="true" />
	 </bean> 
	 -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref local="mainDataSource" />
		</property>
	</bean>
	
    <!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" >
		<property name="dataSource" ref="dataSource" />
	
		
 		<property name="packagesToScan">
			<list>
				<value>com.yourname.demo.**.*</value>
			</list>
		</property>
			 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.show_sql">false</prop>
			    <prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
			</props>
		</property>
	</bean>

	<!-- Switch on transactions -->
	<tx:annotation-driven />

	<context:component-scan base-package="com.yourname.demo"/>
	<context:component-scan base-package="test.com.yourname"/>
	<context:component-scan base-package="com.felees.hbnpojogen.persistence.impl.HibernateUtils"/>



<!-- Add your pointcuts to provide transactions/session management here. Alternately, use the @Transaction annotation in your service layer -->
<!--   
	 <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>         
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    
     <aop:config>
        <aop:pointcut id="testOperation" expression="execution(* test.com.yourname.DAOTest.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="testOperation"/>
    </aop:config>
-->
   
 </beans>
